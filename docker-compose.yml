version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=rootpassword
      - DB_NAME=media_scraper
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    deploy:
      resources:
        limits:
          cpus: "1.0" 
          memory: "1GB" 
    networks:
      - app_network
  
  worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: node src/worker.js
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
    deploy:
      resources:
        limits:
          cpus: "1.0" 
          memory: "1GB" 
    networks:
      - app_network

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
    - app_network

  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=media_scraper
    volumes:
      - mysql_data1:/var/lib/mysql
    networks:
    - app_network

  redis:
    image: redis:alpine
    container_name: redis_queue
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - app_network
    command: ["redis-server", "--appendonly", "yes"]
  
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_ui
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - app_network

volumes:
  mysql_data1: 

networks:
  app_network:
    driver: bridge